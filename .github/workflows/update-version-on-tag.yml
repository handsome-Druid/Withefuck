name: Update version.txt and create tag from commit message

on:
  push:
    branches:
      - '**'

permissions:
  contents: write

jobs:
  update-version-and-tag:
    name: Update version.txt and tag when head commit message ends with -rs (single-line, no spaces)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Read head commit message and SHA
        id: head
        shell: bash
        run: |
          set -euo pipefail
          # GITHUB_SHA points to the head commit of the push
          SHA="${GITHUB_SHA}"
          MSG="$(git log -1 --pretty=%B "$SHA")"
          echo "commit_sha=$SHA" >> "$GITHUB_OUTPUT"
          # Use a multiline output for message to preserve exact content
          {
            echo 'commit_message<<EOF'
            printf '%s\n' "$MSG"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: Update version.txt on rust branch and create/push tag
        id: update
        shell: bash
        run: |
          set -euo pipefail
          MSG='${{ steps.head.outputs.commit_message }}'
          SHA='${{ steps.head.outputs.commit_sha }}'

          # Determine if commit message is valid: single line, no whitespace, ends with -rs
          FIRST_LINE="$(printf '%s' "$MSG" | head -n1)"
          # Count logical lines robustly: append a trailing newline when counting
          # so a single-line message without a trailing newline counts as 1.
          LINE_COUNT="$(printf '%s\n' "$MSG" | wc -l | tr -d ' ')"

          echo "Head commit SHA: $SHA"
          echo "Head commit first line: $FIRST_LINE"
          echo "Total message lines: $LINE_COUNT"

          # Check: one line only
          if [ "$LINE_COUNT" != "1" ]; then
            echo "Commit message is not a single line, skipping."
            exit 0
          fi

          # Check: ends with -rs
          if [[ "$FIRST_LINE" != *-rs ]]; then
            echo "Commit message does not end with -rs, skipping."
            exit 0
          fi

          # Check: contains no whitespace characters (space, tab, etc.)
          if echo "$FIRST_LINE" | grep -q '[[:space:]]'; then
            echo "Commit message contains whitespace, skipping."
            exit 0
          fi

          VERSION="$FIRST_LINE"
          echo "Version detected from commit message: $VERSION"

          # Update version.txt on rust branch
          git fetch --no-tags origin rust
          git checkout -B rust origin/rust || git checkout rust
          git pull --ff-only origin rust || true

          # Normalize: strip leading 'v' if present
          NORM=${VERSION#v}
          echo "Updating version.txt"
          echo -n "$VERSION" > version.txt
          FILE=Cargo.toml
          if [ ! -f "$FILE" ]; then
            echo "$FILE not found, aborting" >&2
            exit 1
          fi

          # Update the first 'version = "..."' occurrence in [package] section
          awk -v ver="${NORM}" '
            BEGIN{in_pkg=0; replaced=0}
            /^\[package\]/{in_pkg=1; print; next}
            /^\[/{ if(in_pkg && !/^\[package\]/){ in_pkg=0 } }
            { if(in_pkg && !replaced && $0 ~ /^version[[:space:]]*=/){
                  print "version = \"" ver "\""; replaced=1; next
              }
              print
            }
          ' "$FILE" > "$FILE.tmp" && mv "$FILE.tmp" "$FILE"


          if git status --porcelain | grep -q "^ M version.txt\|^\?\? version.txt\|^ M Cargo.toml"; then
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add version.txt Cargo.toml
            git commit -m "Update version.txt to $VERSION"
            git push origin rust
            echo "version.txt updated and pushed to rust"
          else
            echo "version.txt unchanged on rust branch; nothing to commit"
          fi

          # Create tag on the pushed commit (not the rust branch commit)
          git fetch --tags origin || true
          if git rev-parse -q --verify "refs/tags/$VERSION" >/dev/null || \
             git ls-remote --exit-code --tags origin "$VERSION" >/dev/null 2>&1; then
            echo "Tag $VERSION already exists on local or remote; skipping creation."
          else
            git tag -a "$VERSION" "$SHA" -m "$VERSION"
            git push origin "refs/tags/$VERSION"
            echo "Created and pushed tag $VERSION at $SHA"
          fi

          # Expose version for downstream steps
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Set up Rust toolchain
        if: steps.update.outputs.version != ''
        uses: dtolnay/rust-toolchain@stable

      - name: Install cross (for musl static builds)
        if: steps.update.outputs.version != ''
        run: cargo install cross --locked

      - name: Install packaging dependencies (fpm + rpm)
        if: steps.update.outputs.version != ''
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev build-essential rpm
          # Install upx (package name varies by Ubuntu release)
          if ! sudo apt-get install -y upx; then
            sudo apt-get install -y upx-ucl || true
          fi
          sudo gem install --no-document fpm

      - name: Build release binary (musl static)
        if: steps.update.outputs.version != ''
        run: cross build --release --target x86_64-unknown-linux-musl

      - name: Build .deb and .rpm with fpm
        if: steps.update.outputs.version != ''
        shell: bash
        run: |
          set -euo pipefail
          chmod +x packaging/build_packages.sh
          # Packaging script will automatically pick musl binary if present
          packaging/build_packages.sh

      - name: Create GitHub Release and upload assets
        if: steps.update.outputs.version != ''
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.update.outputs.version }}
          name: ${{ steps.update.outputs.version }}
          files: |
            packaging/dist/*